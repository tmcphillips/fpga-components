-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_lfsr_next_random_bits is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of simple_lfsr_next_random_bits is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple_lfsr_next_random_bits,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfva625-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.840000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=24}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r : STD_LOGIC_VECTOR (31 downto 0) := "11000101011100000101101000011001";
    signal tmp_8_7_i_fu_318_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_66_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_74_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_50_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_58_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_82_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_90_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_98_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_236_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp12_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_244_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_i_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_7_i_cast_fu_340_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                r <= tmp_8_7_i_fu_318_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(resize(unsigned(tmp_8_7_i_cast_fu_340_p9),32));
    tmp10_fu_254_p2 <= (tmp_18_fu_210_p3 xor tmp_19_fu_236_p3);
    tmp11_fu_274_p2 <= (tmp_13_fu_98_p3 xor tmp_4_fu_50_p3);
    tmp12_fu_280_p2 <= (tmp_19_fu_236_p3 xor tmp_21_fu_266_p3);
    tmp13_fu_300_p2 <= (tmp_14_fu_142_p3 xor tmp_7_fu_58_p3);
    tmp14_fu_306_p2 <= (tmp_21_fu_266_p3 xor tmp_22_fu_292_p3);
    tmp1_fu_198_p2 <= (tmp_14_fu_142_p3 xor tmp_17_fu_184_p3);
    tmp2_fu_218_p2 <= (tmp_4_fu_50_p3 xor tmp_15_fu_150_p3);
    tmp3_fu_124_p2 <= (tmp_11_fu_82_p3 xor tmp_12_fu_90_p3);
    tmp4_fu_130_p2 <= (tmp_7_fu_58_p3 xor tmp_13_fu_98_p3);
    tmp5_fu_224_p2 <= (tmp_17_fu_184_p3 xor tmp_18_fu_210_p3);
    tmp6_fu_158_p2 <= (tmp_15_fu_150_p3 xor tmp_9_fu_66_p3);
    tmp7_fu_164_p2 <= (tmp_13_fu_98_p3 xor tmp_14_fu_142_p3);
    tmp8_fu_248_p2 <= (tmp_7_fu_58_p3 xor tmp_16_fu_176_p3);
    tmp9_fu_192_p2 <= (tmp_16_fu_176_p3 xor tmp_11_fu_82_p3);
    tmp_10_fu_74_p3 <= r(31 downto 31);
    tmp_11_fu_82_p3 <= r(28 downto 28);
    tmp_12_fu_90_p3 <= r(30 downto 30);
    tmp_13_fu_98_p3 <= r(23 downto 23);
    tmp_14_fu_142_p3 <= r(22 downto 22);
    tmp_15_fu_150_p3 <= r(27 downto 27);
    tmp_16_fu_176_p3 <= r(26 downto 26);
    tmp_17_fu_184_p3 <= r(21 downto 21);
    tmp_18_fu_210_p3 <= r(20 downto 20);
    tmp_19_fu_236_p3 <= r(19 downto 19);
    tmp_1_fu_112_p2 <= (tmp_4_fu_50_p3 xor tmp_7_fu_58_p3);
    tmp_20_fu_244_p1 <= r(24 - 1 downto 0);
    tmp_21_fu_266_p3 <= r(18 downto 18);
    tmp_22_fu_292_p3 <= r(17 downto 17);
    tmp_2_fu_118_p2 <= (tmp_1_fu_112_p2 xor tmp_fu_106_p2);
    tmp_3_fu_230_p2 <= (tmp5_fu_224_p2 xor tmp2_fu_218_p2);
    tmp_4_fu_50_p3 <= r(25 downto 25);
    tmp_5_fu_136_p2 <= (tmp4_fu_130_p2 xor tmp3_fu_124_p2);
    tmp_6_fu_260_p2 <= (tmp10_fu_254_p2 xor tmp8_fu_248_p2);
    tmp_6_i_fu_312_p2 <= (tmp14_fu_306_p2 xor tmp13_fu_300_p2);
    tmp_77_i_fu_286_p2 <= (tmp12_fu_280_p2 xor tmp11_fu_274_p2);
    tmp_7_fu_58_p3 <= r(24 downto 24);
    tmp_8_7_i_cast_fu_340_p9 <= (((((((tmp_2_fu_118_p2 & tmp_5_fu_136_p2) & tmp_8_fu_170_p2) & tmp_s_fu_204_p2) & tmp_3_fu_230_p2) & tmp_6_fu_260_p2) & tmp_77_i_fu_286_p2) & tmp_6_i_fu_312_p2);
    tmp_8_7_i_fu_318_p10 <= ((((((((tmp_20_fu_244_p1 & tmp_2_fu_118_p2) & tmp_5_fu_136_p2) & tmp_8_fu_170_p2) & tmp_s_fu_204_p2) & tmp_3_fu_230_p2) & tmp_6_fu_260_p2) & tmp_77_i_fu_286_p2) & tmp_6_i_fu_312_p2);
    tmp_8_fu_170_p2 <= (tmp7_fu_164_p2 xor tmp6_fu_158_p2);
    tmp_9_fu_66_p3 <= r(29 downto 29);
    tmp_fu_106_p2 <= (tmp_9_fu_66_p3 xor tmp_10_fu_74_p3);
    tmp_s_fu_204_p2 <= (tmp1_fu_198_p2 xor tmp9_fu_192_p2);
end behav;
